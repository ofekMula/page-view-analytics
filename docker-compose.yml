version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=analytics
      - POSTGRES_HOST=postgres
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - NUM_PARTITIONS=10
      - FLUSH_INTERVAL_MS=5000
      - BATCH_SIZE=100
      - NUM_SHARDS=10
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: on-failure

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=analytics
      - POSTGRES_HOST=postgres
      - RABBITMQ_URL=amqp://rabbitmq:5672
      - NUM_PARTITIONS=10
      - FLUSH_INTERVAL_MS=5000
      - BATCH_SIZE=100
      - NUM_SHARDS=10
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: on-failure

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=analytics
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  rabbitmq_data:
